(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{339:function(e,t,s){"use strict";s.r(t);var r=s(30),n=Object(r.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api","aria-hidden":"true"}},[e._v("#")]),e._v(" API")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  scheduleTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" validate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  CronosExpression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" CronosTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  CronosTimezone \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'cronosjs'")]),e._v("\n")])])]),s("h3",{attrs:{id:"scheduletask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduletask","aria-hidden":"true"}},[e._v("#")]),e._v(" scheduleTask")]),e._v(" "),s("p",[s("code",[e._v("function scheduleTask(cronString, task, options?)")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("cronString: string")]),s("br"),e._v("\nThe cron expression defining the schedule on which to run the task. "),s("a",{attrs:{href:"#supported-expression-syntax"}},[e._v("Allowed syntax")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("task: (timestamp: number) => void")]),s("br"),e._v("\nThe function to run on each execution of the task. Is called with the timestamp of when the task was scheduled to run.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("options: { timezone?, skipRepeatedHour?, missingHour? }")]),e._v(" (optional)")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("timezone: CronosTimezone | string | number")]),e._v(" (optional)"),s("br"),e._v("\nTimezone in which to schedule the tasks, can be either a "),s("code",[e._v("CronosTimezone")]),e._v(" object, or any IANA timezone or offset accepted by the "),s("a",{attrs:{href:"#cronostimezone"}},[s("code",[e._v("CronosTimezone")]),e._v(" constructor")])]),e._v(" "),s("li",[s("code",[e._v("skipRepeatedHour: boolean")]),e._v(" (optional)"),s("br"),e._v("\nShould tasks be scheduled in the repeated hour when DST ends. "),s("a",{attrs:{href:"#skiprepeatedhour-option"}},[e._v("Further details")])]),e._v(" "),s("li",[s("code",[e._v("missingHour: 'insert' | 'offset' | 'skip'")]),e._v(" (optional)"),s("br"),e._v("\nHow tasks should be scheduled in the missing hour when DST starts. "),s("a",{attrs:{href:"#missinghour-option"}},[e._v("Further details")])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("Returns")]),e._v(" "),s("a",{attrs:{href:"#cronostask"}},[s("code",[e._v("CronosTask")])])])])]),e._v(" "),s("h3",{attrs:{id:"validate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validate","aria-hidden":"true"}},[e._v("#")]),e._v(" validate")]),e._v(" "),s("p",[s("code",[e._v("function validate(cronString)")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("cronString: string")]),s("br"),e._v("\nCron string to validate")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("Returns")]),e._v(" "),s("code",[e._v("boolean")]),s("br"),e._v("\nIs cron string syntax valid")])])]),e._v(" "),s("h3",{attrs:{id:"cronosexpression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cronosexpression","aria-hidden":"true"}},[e._v("#")]),e._v(" CronosExpression")]),e._v(" "),s("p",[s("code",[e._v("class CronosExpression")])]),e._v(" "),s("h4",{attrs:{id:"static-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Static Methods")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("CronosExpression.parse(cronString, options)")]),s("br"),e._v("\nParameters "),s("code",[e._v("cronString")]),e._v(" and "),s("code",[e._v("options")]),e._v(" same as for "),s("a",{attrs:{href:"#scheduletask"}},[s("code",[e._v("scheduleTask")])]),e._v(", returns "),s("code",[e._v("CronosExpression")]),e._v(" instance")])]),e._v(" "),s("h4",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("nextDate(afterDate?)")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("afterDate: Date")]),e._v(" (optional)"),s("br"),e._v("\nThe date after which to find the next date matching the cron expression, if not specified defaults to current date "),s("code",[e._v("new Date()")])]),e._v(" "),s("li",[s("strong",[e._v("Returns")]),e._v(" "),s("code",[e._v("Date")]),s("br"),e._v("\nThe next date matching the cron expression after the given date. May return null if no further matching dates exist (eg. if "),s("code",[e._v("year")]),e._v(" field is specified in expression)")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("nextNDates(afterDate?, n?)")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("afterDate: Date")]),e._v(" (optional)"),s("br"),e._v("\nAs above in "),s("code",[e._v("nextDate")]),e._v(" method")]),e._v(" "),s("li",[s("code",[e._v("n: number")]),e._v(" (optional)"),s("br"),e._v("\nNumber of dates to generate, defaults to 5")]),e._v(" "),s("li",[s("strong",[e._v("Returns")]),e._v(" "),s("code",[e._v("[Date]")]),s("br"),e._v("\nAn array of the next "),s("code",[e._v("n")]),e._v(" dates after the given date. May return fewer dates than specified if no further dates exist")])])])]),e._v(" "),s("h3",{attrs:{id:"cronostask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cronostask","aria-hidden":"true"}},[e._v("#")]),e._v(" CronosTask")]),e._v(" "),s("p",[s("code",[e._v("class CronosTask")])]),e._v(" "),s("h4",{attrs:{id:"constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constructor","aria-hidden":"true"}},[e._v("#")]),e._v(" Constructor")]),e._v(" "),s("p",[s("code",[e._v("new CronosTask(expression)")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("expression: CronosExpression")]),s("br"),e._v("\nAn instance of "),s("a",{attrs:{href:"#cronosexpression"}},[e._v("CronosExpression")])])]),e._v(" "),s("h4",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("nextRun: Date | null")]),e._v(" (readonly)"),s("br"),e._v("\nDate when task is next scheduled to run")]),e._v(" "),s("li",[s("code",[e._v("isRunning: boolean")]),e._v(" (readonly)"),s("br"),e._v("\nIs the task scheduled to run")])]),e._v(" "),s("h4",{attrs:{id:"methods-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("start()")]),s("br"),e._v("\nStarts scheduling executions of the task as defined by the cron expression")]),e._v(" "),s("li",[s("code",[e._v("stop()")]),s("br"),e._v("\nRemoves any scheduled executions and stops any further executions of the task")]),e._v(" "),s("li",[s("code",[e._v("on(event: string, listener: Function)")]),s("br"),e._v("\nAdds a listener for an event")]),e._v(" "),s("li",[s("code",[e._v("off(event: string, listener: Function)")]),s("br"),e._v("\nRemoves a listener for an event")])]),e._v(" "),s("h4",{attrs:{id:"events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#events","aria-hidden":"true"}},[e._v("#")]),e._v(" Events")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("'started': () => void")]),s("br"),e._v("\nListeners called when "),s("code",[e._v("start()")]),e._v(" is called on task")]),e._v(" "),s("li",[s("code",[e._v("'stopped': () => void")]),s("br"),e._v("\nListeners called when "),s("code",[e._v("stop()")]),e._v(" is called on task")]),e._v(" "),s("li",[s("code",[e._v("'run': (timestamp: number) => void")]),s("br"),e._v("\nListeners called on each date matching the cron expression. Listener is passed the timestamp when the execution was scheduled to start")]),e._v(" "),s("li",[s("code",[e._v("'ended': () => void")]),s("br"),e._v("\nListeners called when there are no further matching dates")])]),e._v(" "),s("h3",{attrs:{id:"cronostimezone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cronostimezone","aria-hidden":"true"}},[e._v("#")]),e._v(" CronosTimezone")]),e._v(" "),s("p",[s("code",[e._v("class CronosTimezone")])]),e._v(" "),s("h4",{attrs:{id:"constructor-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Constructor")]),e._v(" "),s("p",[s("code",[e._v("new CronosTimezone(IANANameOrOffset)")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("IANANameOrOffset: string | number")]),s("br"),e._v("\nIANA zone or fixed offset as detailed under "),s("a",{attrs:{href:"#timezone-support"}},[e._v("Timezone Support")])])])])},[],!1,null,null,null);t.default=n.exports}}]);